"use strict";

/*
let num = 1;

function 더하기버튼(){
    num++;
}

더하기버튼();
console.log(num);
더하기버튼();

console.log(num);
*/

function 계산하기() {
  let num = 1;
  function 더하기버튼() {
    num++;
    console.log(num);
  }
  function 빼기버튼() {
    num--;
    console.log(num);
  }
  return { 더하기버튼, 빼기버튼 }; //객체의 키값으로 넣어줌.
  //return 더하기버튼;   // 이렇게 하면 밑에서 증가버튼()을 실행했을 때 원하는 기능이 실행된다.
}

const 결과버튼 = 계산하기(); // 실행()을 시켜줘야 리턴값으로 함수(객체가) 증가버튼에 들어간다.

결과버튼.더하기버튼();
결과버튼.빼기버튼();

let num = 100; //이 값은 스코프 밖의 값이기 때문에 계산하기 함수 안의 num에 아무 영향을 못 줌.
결과버튼.더하기버튼();

//////////////////////////////////////////////////////////////////////////////////

//생성자 함수랑도 섞어 쓸 수 있을까???
function 예시용생성자(name, age) {
  this.name = name;
  this.age = age;

  const 자기소개 = () => {
    const 인사하기 = () => {
      ///화살표함수의 특수한 this 범위
      console.log(`안녕하세요 ${this.name}입니다.`);
    };

    return 인사하기;
  };

  this.인사 = 자기소개();
}

const 성주 = new 예시용생성자("성주", 29);

성주.인사();

const 시은 = new 예시용생성자("시은", 26);
시은.인사();

//에러 뜨는데 불가능한가봄?? bind를 사용해 this로 묶어주면 에러가 뜬다. ..why??

//////////////////////////////////////////////////////////////////////////////

//함수레벨 스코프말고 let과 const는 블록레벨 스코프니 외부 함수 말구 외부 블록을 사용하는 거에도 적용될까?

